import React, { useState, useEffect } from "react";
import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import spin from "../assets/logo/Spinner-1s-200px.gif";
import axios from "axios";
import { ethers } from "ethers";
import * as SolanaWeb3 from "@solana/web3.js";

export default function Home() {
  const [value, setValue] = useState("");
  const [load, setLoad] = useState(true);
  const [allBalance, setAllBalance] = useState([]);

  async function getResolveAddress(name) {
    setLoad(false);

    let myAddr;
    await axios
      .get("https://api.namesof.xyz/v1/name/" + name)
      .then(async res => {
        myAddr = await res.data;
      });

    return myAddr;
  }

  function handleChange(event) {
    setValue(event.target.value);
  }

  async function handleSubmit(event) {
    event.preventDefault();
    const addrr = await getResolveAddress(value);
    getBalance(addrr);
  }

  async function getBalance(addr) {
    // GET Balance ETH
    //if (load) {

    const provider = new ethers.providers.JsonRpcProvider(
      process.env.API_PROVIDER
    );

    let oldArr = [];
    try {
      const addr_eth = addr
        .filter(e => Object.keys(e)[0] == "ENS")
        .map(e => e.ENS);

      const balance_eth = await provider.getBalance(addr_eth[0]);

      oldArr.push({
        crypto: "ETH",
        balance: ethers.utils.formatEther(balance_eth)
      });
    } catch (e) {
      console.log(e);
    }

    // GET Balance ELROND
    try {
      const addr_elrond = addr
        .filter(e => Object.keys(e)[0] == "elrond")
        .map(e => e.elrond);
      await axios
        .get("https://api.elrond.com/accounts/" + addr_elrond[0])
        .then(res => {
          const myBalance = res.data;
          oldArr.push({
            crypto: "EGLD",
            balance: myBalance.balance / 10 ** 17
          });
        });
    } catch (e) {
      console.log(e);
    }

    //GET Balance Solana
    try {
      const addr_bonfida = addr
        .filter(e => Object.keys(e)[0] == "bonfida")
        .map(e => e.bonfida);

      const connection = new SolanaWeb3.Connection(
        SolanaWeb3.clusterApiUrl("mainnet-beta")
      );
      const publicKey = new SolanaWeb3.PublicKey(addr_bonfida[0]);
      const balance_bon = await connection.getBalance(publicKey);
      oldArr.push({
        crypto: "Solana",
        balance: balance_bon / SolanaWeb3.LAMPORTS_PER_SOL
      });
    } catch (e) {
      console.log(e);
    }
    setAllBalance(oldArr);
    console.log(oldArr);
    setLoad(true);

    //}
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className="text-6xl font-bold pb-10">
          Welcome to Cross chain balance
        </h1>

        <p className="text-2xl pb-10">
          This usage use <a href="https://www.namesof.xyz/">namesof service</a>
        </p>

        <form onSubmit={handleSubmit}>
          <label className="text-2xl">
            Your name :
            <input
              className="mx-4 rounded-lg p-2 text-2xl"
              type="text"
              value={value}
              onChange={handleChange}
            />
          </label>
          <input
            className="rounded-lg p-2 bg-orange text-2xl"
            type="submit"
            value="Send"
          />
        </form>

        <div>
          <div className="grid grid-cols-2 gap-2 pt-8">
            {load ? (
              allBalance.map(e => (
                <a className={styles.card}>
                  <h2 className="text-3xl font-bold">
                    Total balance {e.crypto}
                  </h2>
                  <p className="text-center text-2xl">
                    {parseFloat(e.balance).toFixed(2)}
                  </p>
                </a>
              ))
            ) : (
              <div className="w-28 pt-4 ">
                <Image src={spin} />
              </div>
            )}{" "}
          </div>
        </div>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{" "}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  );
}
